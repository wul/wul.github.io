---
layout: post
title: "Learning Pandas (1) - DataFrame Indexing and Slicing"
date: 2014-12-03 08:29:46 +0800
comments: true
categories: [Python, Data Analysis]
---

总是记不着DataFrame中各种Indexing和Slicing操作，也是因为用得少的缘故。很多操作非常像numpy.ndarray的操作，很多又像字典操作，又有类似 sequence 的操作。总之似乎很方便，前提是都得知道该怎么用。

因此整理一下，权当笔记。

首先构造一个试验用的 DataFrame。

![frame](/images/pandas-df.png)

这个 DateFrame 的索引（index）是基于时间的，他得列分别给予标签'one', 'two', 'three'。那么关于索引，有以下几种目的：

Indexing
======

获得某一行
------

分为两种情况.
第一，如果你知道index的值，比如'2012-01-01'，你可以使用

    >>>frame.ix['2012-1-1'] 
    >>>frame.ix['2012-01-1']
    >>>frame.ix['2012-01-01']

来做索引，可以看到，这个给的 key，只要能够正确转换成时间即可。这样，就可以把第一行取出来，生成一个 Series 对象返回；

第二种情况，你可能并不清楚这个 Key，但是你知道你想要第几行数据，比如说第一行，那么你可以用

    >>>frame.ix[0]

 ix 会猜你到底给的是个 标签 类型的还是一个数字类型的索引。当然了，特别要注意，当你的标签，也就是索引本身恰好是数字类型的话，第二种方式可能**会造成歧义**，而返回非期望的结果。

DataFrame 其实还提供了另外的索引方法，

    >>>frame.iloc[idx] 

来明确指定需求一个数字做索引，返回需要的行;

    >>>frame.loc[label_idx] 

则需要一个标签做索引。网上看到有人做过实验，iloc,loc的效率不及ix，没有亲身试过。

获得某一列
------
也分类似两种情况，知道列的标签与否。如果知道，比如可以使用

    >>>frame.ix[:,'one']

取出第一列。如果不知道，使用

    >>>frame.ix[:,0]

取出第一列。当然了，也要注意标签恰好是数字类型而出现歧义。

如果基于标签的索引，还有两种种快捷方式，将列的标签作为 key，将 DataFrame 当做字典来存取，如

    >>>frame['one']

取出第一行。或者将某行当做DataFrame的成员变量哪有存取，如

    >>>frame.one

都可以将第一列当做Series 对象返回

获得指定行指定列
------
仍然是两种情况，基于数字或基于标签的索引，比如去第三行第二列数字8，有如下索引方式：

    >>>frame.ix[2,1]
    >>>frame.ix['2014-1-1', 'two']
    >>>frame.ix[2, 'two']
    >>>frame.ix['2014-1-1', 1]

是不是很灵活啊？ 太灵活了！受不了了！这还没完，还有方法呢，要取出8，还有

    >>>frame['two'][2], 
    >>>frame.two[2]

还有 at（基于标签的）和 iat（基于数字的），如
  
    >>>frame.at[datetime.datetime(2014,1,1), 'two']
    >>>frame.iat(2,1)

还有类方法

    >>>frame.get_value(pd.Timestamp('2014-1-1', 'two')

是不是头很大，不管你是不是头大，我是有点晕。太多的选择真不符合 Python style。


Slicing
======
有了Indexing的各种手段，来学习 Slicing 的时候有许多类似的概念能够用得到。仍旧针对行与列来操作。


取多行
------
比如取第一、二行，返回仍旧是一个 DataFrame。

    >>>frame.ix[0:2]
    >>>frame.ix[[0,1]]
    >>>frame.ix['2012-1-1':'2013-1-1']		 
    >>>frame.ix[pd.DatetimeIndex(['2012-1-1','2013-1-1'])]

前2个方法比较好理解，与NumPy里面的数组操作方式一样，基于数字做索引。 第三种方式给定一个范围，这两个标签之内的所有行都取出（包括最后一个标签对应的行，与数字索引不同）；第四种方式则显得间接，必须显式的将字符串转换成时间索引，来获取其对应的行（FIXME， frame.ix[['2012-1-1','2013-1-1']]不工作）

取多列
------

取出第一、二列

    >>>frame.ix[:,0:2]
    >>>frame.ix[:,[0,1]]
    >>>frame.ix[:,'one':'two']
    >>>frame.ix[:,['one','two']
    >>>frame[0:2]
    >>>frame[[0,1]]
    >>>frame[['one','two']]
第一二种方式基于数字做索引；第三种基于标签，两个标签之间的所有列都取出（包括截止标签对应的列）；第四种提供一个标签列表，属于这个列表中的列都取出;第五、六种是1，2的快捷方式，第七种是第四种方式的快捷操作，没有第三种的快捷方式。

因此，似乎是用标签来做 slicing 的时候，是用类似列表的 *start:end* 不是很管用。


总体看来，ix 的各种操作很方便获得行，而是用 frame[]类似的快捷方式能方便得获得各种列。